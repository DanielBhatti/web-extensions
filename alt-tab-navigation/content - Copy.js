// Set up variables to track the state of the addonlet isDisplayingNumbers = false;let numberMode = false;let currentNumber = '';let numberElements = [];// Add a function to update the position of all number elementsfunction updateNumberPositions() {  for (let i = 0; i < numberElements.length; i++) {    const numberElement = numberElements[i];    const rect = numberElement.target.getBoundingClientRect();    numberElement.style.top = rect.top + 'px';    numberElement.style.left = rect.left + 'px';  }}// Add a function to remove all number elements from the pagefunction removeNumberElements() {  for (let i = 0; i < numberElements.length; i++) {    numberElements[i].remove();  }  numberElements = [];}// Add a keydown listener to the entire documentdocument.addEventListener('keydown', (event) => {  // Check if the Alt key was pressed  if (event.key === 'Alt') {    // Toggle the isDisplayingNumbers variable    isDisplayingNumbers = !isDisplayingNumbers;    // If the Alt key was already pressed, turn off number mode and remove all numbers from the page    if (!isDisplayingNumbers) {      numberMode = false;      currentNumber = '';      removeNumberElements();    }    // If the Alt key was not already pressed, turn on number mode and display numbers next to all tab-able elements    else {      numberMode = true;      const tabbableElements = document.querySelectorAll('a[href], button, input:not([type="hidden"]), select, textarea, [tabindex]:not([tabindex="-1"])');      for (let i = 0; i < tabbableElements.length; i++) {        const element = tabbableElements[i];        const rect = element.getBoundingClientRect();        const numberElement = document.createElement('div');        numberElement.classList.add('tab-number');        numberElement.textContent = i + 1;        numberElement.style.position = 'absolute';        numberElement.style.top = rect.top + 'px';        numberElement.style.left = rect.left + 'px';        numberElement.style.zIndex = '9999';        numberElement.target = element;        document.body.appendChild(numberElement);        numberElements.push(numberElement);      }      updateNumberPositions();    }  }  // If number mode is on, add the typed number to the current number string  else if (numberMode && /^[0-9]$/.test(event.key)) {    currentNumber += event.key;    // If the current number string is long enough to uniquely identify an element, select it and prevent default tab behavior    const number = parseInt(currentNumber);    const tabbableElements = document.querySelectorAll('a[href], button, input:not([type="hidden"]), select, textarea, [tabindex]:not([tabindex="-1"])');    const matchingElements = [];    for (let i = 0; i < tabbableElements.length; i++) {      if (tabbableElements[i].textContent.trim().startsWith(currentNumber)) {        matchingElements.push(tabbableElements[i]);      }    }    if (matchingElements.length === 1) {      matchingElements[0].focus();      event.preventDefault();    }  }});// Add a keyup listener to the entire document to clear the current number string when the Alt key is releaseddocument.addEventListener('keyup', (event) => {  if (event.key === 'Alt') {    currentNumber = '';  }});// Add scroll and resize listeners to the window to update the position of all number elementswindow.addEventListener('scroll', () => {updateNumberPositions();});window.addEventListener('resize', () => {updateNumberPositions();});// Add a blur listener to the entire document to remove all numbers from the page when the user clicks away from the windowdocument.addEventListener('blur', () => {numberMode = false;currentNumber = '';removeNumberElements();isDisplayingNumbers = false;});// Add a click listener to the entire document to prevent default tab behavior when a number is clickeddocument.addEventListener('click', (event) => {if (numberMode && event.target.classList.contains('tab-number')) {const number = parseInt(event.target.textContent);const tabbableElements = document.querySelectorAll('a[href], button, input:not([type="hidden"]), select, textarea, [tabindex]:not([tabindex="-1"])');const matchingElements = [];for (let i = 0; i < tabbableElements.length; i++) {if (tabbableElements[i].textContent.trim().startsWith(number)) {matchingElements.push(tabbableElements[i]);}}if (matchingElements.length === 1) {matchingElements[0].focus();event.preventDefault();}}});// Add some CSS to style the number elementsconst styleElement = document.createElement('style');styleElement.textContent = '.tab-number { display: inline-block; position: absolute; top: 0; left: 0; padding: 2px 5px; background-color: #000; color: #fff; font-size: 12px; font-weight: bold; line-height: 1; border-radius: 2px; box-shadow: 0 2px 2px rgba(0,0,0,0.2); z-index: 9999; }';document.head.appendChild(styleElement);