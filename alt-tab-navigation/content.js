let index = 0;let elementMap = new Map();let inputBuffer = '';function isFocusable(element) {    if (element.tabIndex < 0 || element.hidden || element.disabled) {        return false;    }    switch (element.nodeName) {        case 'A':            return !!element.href && element.rel != 'ignore';        case 'INPUT':            return element.type != 'hidden' && element.type != 'file' && element.type != 'radio' && element.type != 'checkbox';        case 'BUTTON':        case 'SELECT':        case 'TEXTAREA':            return true;        default:            return false;    }}function addLabels() {    // Reset index and Map    index = 0;    elementMap.clear();    const visibleElements = [...document.querySelectorAll('body *')];    visibleElements.forEach(el => {        let rect = el.getBoundingClientRect();        if (rect.width > 0 && rect.height > 0 && el.tagName !== 'SCRIPT' && el.tagName !== 'STYLE' && isFocusable(el)) {            const label = document.createElement('span');            label.className = 'keyboard-nav-label';            label.textContent = index;            el.prepend(label);            elementMap.set(index, el);            index++;        }    });}function removeLabels() {    [...document.getElementsByClassName('keyboard-nav-label')].forEach(el => el.remove());}function selectElement(index) {    if (elementMap.has(index)) {        const element = elementMap.get(index);        element.focus();    }}let labelState = false;document.addEventListener('keydown', event => {    if (event.code === 'Backslash' && event.ctrlKey) {        event.preventDefault();        labelState = !labelState;        if (labelState) {            addLabels();        } else {            removeLabels();        }    }    if (labelState && event.code.startsWith('Digit')) {        event.preventDefault();        inputBuffer += event.key;    }    if (labelState && event.code === 'Backslash') {        const elementIndex = parseInt(inputBuffer, 10);        selectElement(elementIndex);        inputBuffer = '';    }});// You can add custom CSS for the labels herelet style = document.createElement('style');style.innerHTML = `  .keyboard-nav-label {    position: absolute;    background-color: #f00;    color: #fff;    z-index: 1000;    font-size: 14px;    line-height: 14px;    padding: 2px;  }`;document.head.appendChild(style);